// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	authentication "go_shurtiner/internal/app/authentication"
	http "net/http"

	mock "github.com/stretchr/testify/mock"

	model "go_shurtiner/internal/app/model"
)

// Authentication is an autogenerated mock type for the Authentication type
type Authentication struct {
	mock.Mock
}

// Authenticate provides a mock function with given fields: r
func (_m *Authentication) Authenticate(r *http.Request) (*model.User, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for Authenticate")
	}

	var r0 *model.User
	var r1 error
	if rf, ok := ret.Get(0).(func(*http.Request) (*model.User, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(*http.Request) *model.User); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.User)
		}
	}

	if rf, ok := ret.Get(1).(func(*http.Request) error); ok {
		r1 = rf(r)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// HasAuthHeader provides a mock function with given fields: r
func (_m *Authentication) HasAuthHeader(r *http.Request) bool {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for HasAuthHeader")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(*http.Request) bool); ok {
		r0 = rf(r)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// UnauthorizedResponse provides a mock function with given fields: err
func (_m *Authentication) UnauthorizedResponse(err error) authentication.UnauthorizedResponse {
	ret := _m.Called(err)

	if len(ret) == 0 {
		panic("no return value specified for UnauthorizedResponse")
	}

	var r0 authentication.UnauthorizedResponse
	if rf, ok := ret.Get(0).(func(error) authentication.UnauthorizedResponse); ok {
		r0 = rf(err)
	} else {
		r0 = ret.Get(0).(authentication.UnauthorizedResponse)
	}

	return r0
}

// NewAuthentication creates a new instance of Authentication. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAuthentication(t interface {
	mock.TestingT
	Cleanup(func())
}) *Authentication {
	mock := &Authentication{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
