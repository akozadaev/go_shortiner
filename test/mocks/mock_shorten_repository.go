// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"
	model "go_shurtiner/internal/app/model"

	mock "github.com/stretchr/testify/mock"
)

// ShortenRepository is an autogenerated mock type for the ShortenRepository type
type ShortenRepository struct {
	mock.Mock
}

// FetchLinks provides a mock function with given fields: ctx
func (_m *ShortenRepository) FetchLinks(ctx context.Context) ([]model.Link, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for FetchLinks")
	}

	var r0 []model.Link
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]model.Link, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []model.Link); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Link)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindLink provides a mock function with given fields: ctx, shortened
func (_m *ShortenRepository) FindLink(ctx context.Context, shortened string) (model.Link, error) {
	ret := _m.Called(ctx, shortened)

	if len(ret) == 0 {
		panic("no return value specified for FindLink")
	}

	var r0 model.Link
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (model.Link, error)); ok {
		return rf(ctx, shortened)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) model.Link); ok {
		r0 = rf(ctx, shortened)
	} else {
		r0 = ret.Get(0).(model.Link)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, shortened)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SaveLink provides a mock function with given fields: ctx, link
func (_m *ShortenRepository) SaveLink(ctx context.Context, link *model.Link) error {
	ret := _m.Called(ctx, link)

	if len(ret) == 0 {
		panic("no return value specified for SaveLink")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.Link) error); ok {
		r0 = rf(ctx, link)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewShortenRepository creates a new instance of ShortenRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewShortenRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *ShortenRepository {
	mock := &ShortenRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
