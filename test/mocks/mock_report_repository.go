// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"
	model "go_shurtiner/internal/app/model"

	mock "github.com/stretchr/testify/mock"

	time "time"
)

// ReportRepository is an autogenerated mock type for the ReportRepository type
type ReportRepository struct {
	mock.Mock
}

// CreateReport provides a mock function with given fields: ctx, startDate
func (_m *ReportRepository) CreateReport(ctx context.Context, startDate time.Time) (*[]model.PreparedReport, error) {
	ret := _m.Called(ctx, startDate)

	if len(ret) == 0 {
		panic("no return value specified for CreateReport")
	}

	var r0 *[]model.PreparedReport
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, time.Time) (*[]model.PreparedReport, error)); ok {
		return rf(ctx, startDate)
	}
	if rf, ok := ret.Get(0).(func(context.Context, time.Time) *[]model.PreparedReport); ok {
		r0 = rf(ctx, startDate)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]model.PreparedReport)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, time.Time) error); ok {
		r1 = rf(ctx, startDate)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetReportData provides a mock function with given fields: ctx, startDate
func (_m *ReportRepository) GetReportData(ctx context.Context, startDate time.Time) (*[]model.PreparedReport, error) {
	ret := _m.Called(ctx, startDate)

	if len(ret) == 0 {
		panic("no return value specified for GetReportData")
	}

	var r0 *[]model.PreparedReport
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, time.Time) (*[]model.PreparedReport, error)); ok {
		return rf(ctx, startDate)
	}
	if rf, ok := ret.Get(0).(func(context.Context, time.Time) *[]model.PreparedReport); ok {
		r0 = rf(ctx, startDate)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]model.PreparedReport)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, time.Time) error); ok {
		r1 = rf(ctx, startDate)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PrepareReportData provides a mock function with given fields: ctx
func (_m *ReportRepository) PrepareReportData(ctx context.Context) ([]model.Link, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for PrepareReportData")
	}

	var r0 []model.Link
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]model.Link, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []model.Link); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Link)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SaveReportData provides a mock function with given fields: ctx, reportData
func (_m *ReportRepository) SaveReportData(ctx context.Context, reportData *model.PreparedReport) error {
	ret := _m.Called(ctx, reportData)

	if len(ret) == 0 {
		panic("no return value specified for SaveReportData")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.PreparedReport) error); ok {
		r0 = rf(ctx, reportData)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewReportRepository creates a new instance of ReportRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewReportRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *ReportRepository {
	mock := &ReportRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
